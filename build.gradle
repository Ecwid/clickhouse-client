buildscript {
    ext.kotlinVersion = '1.3.11'
    ext.gsonVersion = '2.8.2'
    ext.junitVersion = '5.1.0'
    ext.httpCoreVersion= '4.4.10'
    ext.httpClientVersion = '4.5.6'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "idea"
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.google.code.gson:gson:$gsonVersion"

    implementation "org.apache.httpcomponents:httpcore:$httpCoreVersion"
    implementation "org.apache.httpcomponents:httpclient:$httpClientVersion"

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"


    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation "org.mockito:mockito-core:2.15.0"
    testImplementation "org.hamcrest:hamcrest-library:1.3"
    testImplementation "org.slf4j:slf4j-simple:1.7.25"
}

if (JavaVersion.current().isJava9Compatible()) {
    tasks.withType(JavaCompile).all { options.compilerArgs.addAll(['--release', '8']) }
}

test {
    enableAssertions = true
    useJUnitPlatform()

    testLogging {
        exceptionFormat 'full'
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        // Set to true if you want to see output from tests
        showStandardStreams false
    }
}

// --------------------------------------------------------------
// Tasks for publishing into Maven Central

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

def doUploadArchives = project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
if (doUploadArchives) {
    group = "com.ecwid.clickhouse"
    archivesBaseName = "clickhouse-client"
    version = "0.0.1"

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'Ecwid ClickHouse Client'
                    packaging 'jar'
                    description 'Java client for ClickHouse HTTP API (https://clickhouse.yandex)'
                    url 'https://github.com/Ecwid/clickhouse-client'

                    scm {
                        connection 'scm:git:git@github.com:Ecwid/clickhouse-client.git'
                        developerConnection 'scm:git:git@github.com:Ecwid/clickhouse-client.git'
                        url 'https://github.com/Ecwid/clickhouse-client.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'vgv'
                            name 'Vasily Vasilkov'
                            email 'vgv@ecwid.com'
                        }
                    }
                }
            }
        }
    }
}